// Mocks generated by Mockito 5.4.2 from annotations
// in example/test/counter_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:example/main.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CounterViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCounterViewModel extends _i1.Mock implements _i2.CounterViewModel {
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isClosed(bool? _isClosed) => super.noSuchMethod(
        Invocation.setter(
          #isClosed,
          _isClosed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Stream<int> get stateStream => (super.noSuchMethod(
        Invocation.getter(#stateStream),
        returnValue: _i3.Stream<int>.empty(),
        returnValueForMissingStub: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);

  @override
  _i3.Stream<bool> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _i3.Stream<bool>.empty(),
        returnValueForMissingStub: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  void add() => super.noSuchMethod(
        Invocation.method(
          #add,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitState(int? state) => super.noSuchMethod(
        Invocation.method(
          #emitState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitEvent(bool? event) => super.noSuchMethod(
        Invocation.method(
          #emitEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
